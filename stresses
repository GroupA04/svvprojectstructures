#All variables from Fokker 100 Data sheet
#Everything defined as meter, Newton, or deg
import matplotlib.pyplot as plt
import numpy as np
C_a = 0.505 # [m] 
l_a = 1.611 # [m]
x_1 = 0.125 # [m]
x_2 = 0.498 # [m]
x_3 = 1.494 # [m]
x_a = 0.245 # [m]
h = 0.161   # [m] 
t_sk = 0.0011 # [m] 
t_sp = 0.0024 # [m] 
t_st = 0.0012 # [m] 
h_st = 0.012  # [m] 
w_st = 0.017  # [m] 
n_st = 11
d_1 = 0.00389 # [m] 
d_3 = 0.01245 # [m] 
theta = 30 # [degrees]
P = 49200  # [Newton]
A_I = np.pi/2 * (h/2)**2
A_II = h/2 * (C_a-h/2)
G = 28 * 10**9

'''
C_a = 0.605  # m
l_a = 2.661  # m
x_1 = 0.172  # m
x_2 = 1.211  # m
x_3 = 2.591  # m
x_a = 0.35   # m
h = 0.205  # m
t_sk = 1.1/1000  # m
t_sp = 2.8/1000  # m
t_st = 1.2/1000  # m
h_st = 16./1000   # m
w_st = 19./1000   # m
n_st = 15  # -
d_1 = 0.01154  # m
d_3 = 0.01840  # m
#theta = radians(28)  # rad
P = 97.4*1000  # N
'''
#Moment of Inertia calculation


#Centroid calculation - centroid lies on the z axis because it is symmetrical around z 
#The position due on the z can be calculated by multypling sum of areas with distances and divide by sum of areas 
#This is done in unrotated coordinate system

#perimeter of the cross section and stiffener spacing
diagonallength = np.sqrt((h/2)**2 + (C_a - h/2)**2)
lengthskin = np.pi * h/2 + 2 * diagonallength
ST_spacing = lengthskin / n_st

#stringer area
A_st = t_st *( h_st + w_st)

#intermediate parameters for stringer coordinates (a = stringer_1 to spar and b= spar to stringer_2 ) - stringer notation starts from stringer_0
# phi is the angle of the upper corner of the triangular part of the cross-section
phi= np.arctan((C_a - h/2)/(h/2))

a = np.pi* h / 4 - ST_spacing 
b= ST_spacing - a

#stringer coordinates -  array of 11 stringers by 2 coordinates - starting from LE going around the upper skin to TE to lower skin
#coordinate system is at the TE with y positive upwards and z positive towards the LE

stringercoordinates = np.zeros([n_st ,2])
stringercoordinates[0,0] = C_a 
stringercoordinates[0,1] = 0.0
stringercoordinates[1,0] = C_a - (h/2 - h/2 * np.cos(2*ST_spacing/ h))
stringercoordinates[1,1] = h/2 * np.sin (2* ST_spacing / h)
stringercoordinates[2,0] = C_a - (h/2 + b* np.sin(phi))
stringercoordinates[2,1] = h/2 -b* np.cos(phi)
stringercoordinates[3,0] = C_a - (h/2 + (b+ ST_spacing)* np.sin(phi))
stringercoordinates[3,1] = h/2 - (b+ ST_spacing) * np.cos(phi)
stringercoordinates[4,0] = C_a - (h/2 + (b+ 2* ST_spacing) * np.sin(phi))
stringercoordinates[4,1] = h/2 - (b+ 2* ST_spacing) * np.cos(phi)
stringercoordinates[5,0] = C_a - (h/2 + (b+ 3*ST_spacing) * np.sin(phi))
stringercoordinates[5,1] = h/2 - (b+ 3 * ST_spacing) * np.cos(phi)
stringercoordinates[6,0] = C_a - (h/2 + (b+ 3*ST_spacing) * np.sin(phi))
stringercoordinates[6,1] = -(h/2 - (b+ 3 * ST_spacing) * np.cos(phi))
stringercoordinates[7,0] = C_a - (h/2 + (b+ 2* ST_spacing) * np.sin(phi))
stringercoordinates[7,1] = -(h/2-(b+ 2* ST_spacing) * np.cos(phi))
stringercoordinates[8,0] = C_a - (h/2 + (b+ ST_spacing)* np.sin(phi))
stringercoordinates[8,1] = -(h/2 - (b+ ST_spacing) * np.cos(phi)) 
stringercoordinates[9,0] = C_a - (h/2 + b* np.sin(phi))
stringercoordinates[9,1] = -(h/2 -b* np.cos(phi))
stringercoordinates[10,0] = C_a - (h/2 - h/2 * np.cos(2*ST_spacing/ h))
stringercoordinates[10,1] = -(h/2 * np.sin (2* ST_spacing / h))

#centroid calculation
y_bar= 0.0
z_bar= ((np.pi * h/4 * t_sk) * (C_a - h/4) + h/2 * t_sp * (C_a -h/2) + diagonallength * t_sk* (C_a -h/2)/2 + A_st * sum(stringercoordinates[1:6,0])+ A_st/2 * stringercoordinates[0,0])  / (5.5* A_st + h/2 * t_sp + lengthskin/2 * t_sk)                        
centroid = [z_bar,y_bar]

I_zz_st = A_st * sum((stringercoordinates[:,1])**2)      # MoI around z-axis due to the stringers
I_yy_st = A_st * sum(((stringercoordinates[:,0])-z_bar)**2)      # MoI around y-axis due to the stringers


I_zz_sk_diagonalpart = (t_st * (2*diagonallength)**3 * (h/2/diagonallength)**2) / 12        # MoI around z-axis due to the skin of the diagonal part of cross-section
I_yy_sk_diagonalpart = 2* ((t_st * (diagonallength)**3 * ((C_a-h/2)/diagonallength)**2) / 12 + t_sk * diagonallength * (z_bar - (C_a-h/2) / 2 )**2)#+ 2 *diagonallength * t_sk * z_bar**2 # MoI around y-axis due to the skin of the diagonal part of cross-section


I_zz_sk_arc = np.pi * (h/2)**3 * t_sk / 2                                           # MoI around z-axis due to the skin of the arc in cross-section 
I_yy_sk_arc = I_zz_sk_arc + np.pi * h/2 * t_st * ((C_a - h/2 - z_bar)**2 - (4*h/2/3/np.pi)**2)     # MoI around y-axis due to the skin of the arc in cross-section

I_zz_sk = I_zz_sk_diagonalpart + I_zz_sk_arc        # Moment of Inertia around z-axis due to the skin
I_yy_sk = I_yy_sk_diagonalpart + I_yy_sk_arc        # Moment of Inertia around y-axis due to the skin

I_zz_sp = h**3 * t_sp / 12 
I_yy_sp = h * t_sp * (C_a - h/2 - z_bar)**2

I_zz = I_zz_st + I_zz_sk + I_zz_sp   # Total Moment of Inertia around z-axis
I_yy = I_yy_st + I_yy_sk + I_yy_sp   # Total Moment of Inertia around y-axis

S=1 #so there are 1611 sectons each with a length of 0.001 m 
S_y_array = np.ones(100) 
S_z_array = np.ones(100)
'''
for i in range(S):
    if i < x_1 * S/l_a:
        S_y_array.append(Q[i])
        S_z_array.append(0)
    if i == x_l * S/ l_a:
        S_y_array.append(Q[i]+R_I_y)
        S_z.array.append(R_I_z)
    if x_1*S/l_a < i < (x_2 - x_a/2) * S/l_a : 
        S_y_array.append(Q[i])
        S_z_array.append(0)
    if i == (x_2 -x_a/2) * S/l_a:
        S_y_array.append(Q[i]+ P_I_y)
        S_z_array.append(P_I_z)
    if (x_2 -x_a/2) * S/l_a < i < x_2 *S/l_a:
        S_y_array.append(Q[i])
        S_z_array.append(0)
    if i == x_2 *S/l_a :
        S_y_array.append(Q[i]+R_II_y)
        S_z_array.append(R_II_z)
    if x_2 *S/l_a < i < (x_2 + x_a/2) *S/l_a:
        S_y_array.append(Q[i])
        S_z_array.append(0)
    if i == (x_2 + x_a/2) *S/l_a:
        S_y_array.append(Q[i] + P_II_y)
        S_z_array.append(P_II_z)
    if (x_2 + x_a/2) *S/l_a < i < x_3*S/l_a:
        S_y_array.append(Q[i])
        S_z_array.append(0)
    if i == x_3 *S/l_a:
        S_y_array.append(Q[i]+R_III_y)
        S_z_array.append(R_III_z)
    if i > x_3 *S/l_a:
        S_y_array.append(Q[i])
        S_z_array.append(0)
'''
#this will give out an array of 1611 forces at cross-sections along the span 

#doing the base shear flow calculations in cell I

#functions inside integrals under the form coordinates* thickness

def f1(s): #upper diagonal flange y value 
    return t_sk*s* np.cos(phi)
def f2(s): # upper diagonal flange z value
    return t_sk *s * np.sin(phi)

def f3(s): # semicircle y value
    return t_sk * h/2 * np.cos(2*s/h)
def f4(s): #semicircle z value
    return ((C_a- h/2) + h/2 * np.sin(2*s/h)) * t_sk

def f5(s): #lower diagonal flange y value
    return t_sk * (-1) * np.cos(phi) * s
def f6(s): #lower diagonal flange z value
    return t_sk * ((C_a -h/2) - s* np.sin(phi))

def f7(s): #spar y value up down
    return h/2 - s
def f8(s): #spar z value 
    return C_a - h/2        
def f9(s): #spar y value down up
    return -h/2 + s
def f10(s): #spar z value 
    return C_a - h/2 
def f11(x):
    return x*x

def skinintegral(a,b,f):
    value = 0 
    result = 0 
    n1=100
    for i in range(1, n1+1):
        value += f(a+((i-(1/2))*((b-a)/n1)))
    result = ((b-a)/n1)*value 
    return result


def skinintegral_F(n2,f,a,b):
    F=0
    baseshear_array = []
    for i in range(n2):
        F = skinintegral(i/n2*(b-a), (i+1)/n2*(b-a), f)
        baseshear_array.append(F)
    return baseshear_array


zarray = np.linspace(0, C_a-h/2, 10)
yarray = np.linspace(0, h, 10)
zinversearray= np.linspace(C_a-h/2, 0 ,10)
zprimearray=np.linspace(C_a-h/2, C_a,5)
azarray=np.linspace(C_a,C_a-h/2,5)
q_semicircle_along_span= []
q_upperdiag_along_span= []
q_lowerdiag_along_span= []
q_spar_I_along_span= []
q_spar_II_along_span= []

for i in range(S):
    baseshear_upperdiag=[]
    baseshear_lowerdiag=[]
    baseshear_spar_cell_II=[]
    baseshear_spar_cell_I=[]
    baseshear_semicircle=[]
    previous_b=0
    previous_d=0
    previous_f=0
    previous_h=0
    previous_j=0
    previous_l=0
    for j in range(len(zarray)):
        if j < stringercoordinates[5,0]/C_a*len(zarray):
            B_z= 0* np.ones(5)
            B_y= 0* np.ones(5)
        if stringercoordinates[5,0]/C_a * len(zarray) < j < stringercoordinates[4,0]/C_a * len(zarray):
            B_z= A_st * sum(stringercoordinates[5:6,0]) * np.ones(5)
            B_y= A_st * sum(stringercoordinates[5:6,1]) *np.ones(5)
        if stringercoordinates[4,0]/C_a * len(zarray) < j < stringercoordinates[3,0]/C_a * len(zarray):
            B_z= A_st * sum(stringercoordinates[4:6,0]) *np.ones(5)
            B_y= A_st * sum(stringercoordinates[4:6,1])*np.ones(5)
        if stringercoordinates[3,0]/C_a * len(zarray) < j < stringercoordinates[2,0]/C_a * len(zarray):
            B_z= A_st * sum(stringercoordinates[3:6,0]) *np.ones(5)
            B_y= A_st * sum(stringercoordinates[3:6,1])*np.ones(5)
        if j> stringercoordinates[2,0]/C_a * len(zarray):
            B_z= A_st * sum(stringercoordinates[2:6,0]) *np.ones(5)
            B_y= A_st * sum(stringercoordinates[2:6,1])*np.ones(5)
        baseshear_upperdiag.extend(np.add([-S_y_array[i]/I_zz *x for x in  np.add(skinintegral_F(5,f1, previous_b, j/len(zarray)*diagonallength) , B_y)] , [- S_z_array[i]/I_yy *x for x in np.add(skinintegral_F(5,f2, previous_b, j/len(zarray)*diagonallength), B_z)]))
        previous_b = j/len(zarray)*diagonallength
    q_b_total_upperdiag = sum(baseshear_upperdiag)
    q_b_total_upperdiag_array = [q_b_total_upperdiag*x for x in np.ones(5)]
    for k in range (len(yarray)):
        baseshear_spar_cell_II.extend(np.add(np.add(q_b_total_upperdiag_array, [- S_y_array[i]/I_zz * x for x in  (skinintegral_F(5,f7, previous_d,  k/len(yarray)*h))]) , [- S_z_array[i]/I_yy * x for x in (skinintegral_F(5,f8,previous_d, k/len(yarray)*h))]))
        previous_d = k *h/len(yarray)
    q_b_total_spar= sum(baseshear_spar_cell_II)
    q_b_total_spar_array = [q_b_total_spar*x for x in np.ones(5)]
    for l in range(len(zinversearray)):
        if  l > stringercoordinates[9,0]/C_a*len(zinversearray) :
            B_z= 0* np.ones(5)
            B_y= 0* np.ones(5)
        if stringercoordinates[9,0]/C_a * len(zinversearray) > l > stringercoordinates[8,0]/C_a * len(zinversearray):
            B_z= A_st * sum(stringercoordinates[9:10,0]) * np.ones(5)
            B_y= A_st * sum(stringercoordinates[9:10:6,1]) *np.ones(5)
        if stringercoordinates[8,0]/C_a * len(zinversearray) > l > stringercoordinates[7,0]/C_a * len(zinversearray):
            B_z= A_st * sum(stringercoordinates[8:10,0]) *np.ones(5)
            B_y= A_st * sum(stringercoordinates[8:10,1])*np.ones(5)
        if stringercoordinates[7,0]/C_a * len(zinversearray) > l > stringercoordinates[6,0]/C_a * len(zinversearray):
            B_z= A_st * sum(stringercoordinates[7:10,0]) *np.ones(5)
            B_y= A_st * sum(stringercoordinates[7:10,1])*np.ones(5)
        if l< stringercoordinates[6,0]/C_a * len(zinversearray):
            B_z= A_st * sum(stringercoordinates[6:10,0]) *np.ones(5)
            B_y= A_st * sum(stringercoordinates[6:10,1])*np.ones(5)
        baseshear_lowerdiag.extend(np.add(np.add(q_b_total_spar_array, [- S_y_array[i]/I_zz * x for x in  np.add(np.abs(skinintegral_F(5,f5, previous_f,  l/len(zinversearray)*diagonallength)), B_y)]) , [- S_z_array[i]/I_yy * x for x in np.add(np.abs(skinintegral_F(5,f6,previous_f, l/len(zinversearray)*diagonallength)),B_z)]))
        previous_f=l/len(zinversearray)*diagonallength
    q_b_total_lowerdiag=sum(baseshear_lowerdiag)
    q_b_total_lowerdiag_array = [q_b_total_lowerdiag *x for x in np.ones(5)]
    #cell I
    for m in range(len(zprimearray)):
        if m < stringercoordinates[1,0] /C_a *len(zprimearray) :
            B_z = 0*np.ones(5)
            B_y=0*np.ones(5)
        if stringercoordinates[1,0]/C_a *len(zprimearray) < m:
            B_z=stringercoordinates[1,0]*A_st*np.ones(5)
            B_y= stringercoordinates[1,1]*A_st*np.ones(5)
        baseshear_semicircle.extend(np.add([-S_y_array[i]/I_zz*x for x in np.add(skinintegral_F(5,f3, previous_h, m/len(zprimearray) *h/4*np.pi ), B_y)], [-S_z_array[i]/I_yy*x for x in np.add(skinintegral_F(5,f4,previous_h,m/len(zprimearray)*h/4*np.pi),B_z)]))
        previous_h=m/len(zprimearray)*h/2*np.pi
    q_b_total_quartercircle = sum(baseshear_semicircle)
    q_b_total_quartercircle_array= [q_b_total_quartercircle*x for x in np.ones(5)]
    for n in range(len(azarray)):
        if n > stringercoordinates[10,0]/C_a*len(azarray):
            B_z=stringercoordinates[0,0]*A_st
            B_y=stringercoordinates[0,1]*A_st
        if n< stringercoordinates[10,0]/C_a*len(azarray):
            B_z=np.ones(5)*A_st*(stringercoordinates[0,0]+stringercoordinates[10,0])
            B_y=np.ones(5)*A_st*(stringercoordinates[0,1]+stringercoordinates[10,1])
        baseshear_semicircle.extend(np.add(np.add([-S_y_array[i]/I_zz *x for x in np.add(np.abs(skinintegral_F(5,f3,previous_j, m/len(azarray)*h/4*np.pi + h/4*np.pi)) , B_y)],[-S_z_array[i]/I_yy *x for x in np.add(np.abs(skinintegral_F(5,f4, previous_j, m/len(azarray)*h/4*np.pi + np.pi *h/4)) ,B_z)]),q_b_total_quartercircle_array ))
        previous_j=m/len(zprimearray)*h/4*np.pi+h/4*np.pi
    q_b_total_semicircle=sum(baseshear_semicircle)
    q_b_total_semircircle_array =[q_b_total_semicircle*x for x in np.ones(5)]
    for o in range(len(yarray)):
        baseshear_spar_cell_I.extend(np.add(np.add(q_b_total_semircircle_array,[-S_y_array[i]*x for x in np.add(np.abs(skinintegral_F(5,f9,previous_l,o/len(yarray)*h)),B_y)]),[-S_z_array[i]*x for x in np.add(np.abs(skinintegral_F(5,f10,previous_l,o/len(yarray)*h)),B_z)]))
        previous_l=o/len(yarray)*h
    q_b_total_spar_cell_I=sum(baseshear_spar_cell_I)
    #now that the base shear flows are found we use 3 more equations with 3 unknowns to find the redundant shear flwo
    #some constants that will be used in the 3x3 redundant shear flow matrix 
    A= np.pi * (h/2)**2
    B= 2*h*(C_a-h/2)
    C=0
    for c in range(len(baseshear_semicircle)-1):
        C=C+ h/2 * (baseshear_semicircle[c] + baseshear_semicircle[c+1])/2 * (np.pi *h/2)/len(baseshear_semicircle) + h/2 * np.sin(phi) * (baseshear_upperdiag[c] + baseshear_upperdiag[c+1])/2 * diagonallength/len(baseshear_upperdiag) + h/2* np.sin(phi) * (baseshear_lowerdiag[c]+baseshear_lowerdiag[c+1])/2 * diagonallength/len(baseshear_lowerdiag)
    D=1/(2*A_I*G)
    E=0
    for e in range(len(baseshear_semicircle)-1):
        E=E+ (baseshear_semicircle[e] + baseshear_semicircle[e+1])/2/t_sk *h/2 * ((e+1)-e)/len(baseshear_semicircle)*np.pi
    F=0
    for f in range(len(baseshear_spar_cell_II)-1):
        F=F+ ((baseshear_spar_cell_I[f] + baseshear_spar_cell_I[f+1])/2 - (baseshear_spar_cell_II[f]+baseshear_spar_cell_II[f+1])/2 )/t_sp * ((f+1)-f)/len(baseshear_spar_cell_II) * h
    G=1/(2*A_II*G)
    H=0
    for h1 in range(len(baseshear_upperdiag)-1):
        H=H+ (baseshear_upperdiag[h1]+baseshear_upperdiag[h1+1])/2/t_sk*((h1+1)-h1)/len(baseshear_upperdiag)* diagonallength
    I=0
    for i in range(len(baseshear_spar_cell_I)-1):
        I=I+ ((baseshear_spar_cell_II[i] + baseshear_spar_cell_II[i+1])/2 - (baseshear_spar_cell_I[i]+baseshear_spar_cell_I[i+1])/2) /t_sp * ((i+1)-i)/len(baseshear_spar_cell_I) * h
    J=0
    for j in range(len(baseshear_lowerdiag)-1):
        J=J+ (baseshear_lowerdiag[j] + baseshear_lowerdiag[j+1])/2 /t_sk * ((j+1)-j)/len(baseshear_lowerdiag) *diagonallength
    
    M1=np.zeros([3,3])
    M2=np.zeros([3,1])
    M3=np.zeros([3,1])
    M1[0,0] = A
    M1[0,1] = B
    M1[0,2] = 0
    M1[1,0] = D*np.pi*h/2 / t_sk +D*h
    M1[1,1] = -D*h
    M1[1,2] = -1
    M1[2,0] = -G*h/t_sp
    M1[2,1] = G*h/t_sp + 2* G*diagonallength/t_sk 
    M1[2,2] = -1
    M3[0,0] = -C
    M3[1,0] = -D*E-D*F
    M3[2,0] = -G*(H+I+J)
    M2=np.linalg.solve(M1,M3)
    q_s_0_I = M2[0,0]
    q_s_0_II = M2[1,0]
    dtheta_dz = M2[2,0]
    #final shear flows with base shear flow and redundant shear flow lists
    q_semicircle=[]
    q_upperdiag=[]
    q_lowerdiag=[]
    q_spar_I=[]
    q_spar_II=[]
    q_semicircle= np.add(baseshear_semicircle, np.ones(50) * q_s_0_I)
    q_upperdiag= np.add(baseshear_upperdiag, np.ones(50)* q_s_0_II)
    q_lowerdiag=np.add(baseshear_lowerdiag, np.ones(50)* q_s_0_II)
    q_spar_I= np.add(baseshear_spar_cell_I, np.ones(50)* q_s_0_I)
    q_spar_II=np.add(baseshear_spar_cell_II, np.ones(50)* q_s_0_II)
    q_semicircle_along_span.append(q_semicircle)
    q_upperdiag_along_span.append(q_upperdiag)
    q_lowerdiag_along_span.append(q_lowerdiag)
    q_spar_I_along_span.append(q_spar_I)
    q_spar_II_along_span.append(q_spar_II)
    
#shear centre
    z_SC = (C_a-h/2) - C/S_y_array[i] #shear centre position from trailing edge

plt.scatter()
    
    
'''
Sigma_x_upperdiag=[]
Sigma_x_lowerdiag=[]
Sigma_x_spar=[]
Sigma_x_semicircle=[]
diag=np.linspace(0,diagonallength, 500)
spar=np.linspace(0,h,500)
quartercircle=np.linspace(np.pi/2,0,500)
z1=np.linspace(0,C_a-h/2,500)
y1=np.linspace(0,h/2,500)
z2=C_a-h/2
y2=np.linspace(-h/2,h/2,500)
y3=np.linspace(-h/2,0,500)
z3=np.linspace(C_a-h/2,0,500)

for i in range(S):
    for j in range(len(
    diag)):
        Sigma_x_upperdiag.append((M_z[i]*I_yy* y1[j] + M_y[i]*I_zz*z1[j])/(I_yy*I_zz))
    for k in range(len(spar)):    
        Sigma_x_spar.append((M_z[i]*I_yy* y2[k] + M_y[i]*I_zz*z2)/(I_yy*I_zz))
    for l in range(len(diag)):
        Sigma_x_lowerdiag.append((M_z[i]*I_yy* y3[l] + M_y[i]*I_zz*z3[l])/(I_yy*I_zz))
    for m in range(len(quartercircle)):
        Sigma_x_semicircle.extend(M_z[i]*I_yy* sin((len(quartercircle)-m)/len(quartercircle)* np.pi/2)*h/2 + M_y[i]*I_zz * (C_a + cos((len(quartercircle)-m)/len(quartercircle)*np.pi/2)*h/2))
    for n in range(len(quartercircle)):
        Sigma_x_semicircle.extend(M_z[i]*I_yy* (-sin(n/len(quartercircle)*np.pi/2)*h/2 ) + M_y *I_zz* (C_a + cos(n/len(quartercircle)*np.pi/2 *h/2 )))
'''      
